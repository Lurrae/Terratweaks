A highly-configurable collection of vanilla changes brought to you by the developers of Terrarmory! Most of these changes are quite minor, but there are some additional features which significantly alter the balance of vanilla Terraria. These are disabled by default. Terratweaks also has numerous mod calls, which are listed below.
This mod currently implements too many changes to list in the mod description, so you'll have to browse the mod's config to see them all.

[h3][u]MOD CALLS:[/h3][/u]
[list]
[*][code]Call("Query", string settingToQuery)[/code] - Returns the state of the config option being queried, though will throw an exception if a string is not provided or the string does not match any config name. Currently supports every config option in the mod, with aliases for some of them. Useful for implementing custom behavior with certain config options active!
[*][code]Call("AddPermConsumable", int itemID, Func<Player, bool> condition)[/code] - Registers a new permanent consumable item (or updates the conditions for one that's already handled) for use with the relevant client-side config. The condition should look something like this: (Player p) => p.usedAegisCrystal; where p.usedAegisCrystal is a variable denoting whether the item has been consumed or not. Returns true if successful, but throws an exception if an invalid argument is provided.
[*][code]Call("AddPermConsumable", int itemID, Func<Player, Vector2> condition)[/code] - A variant of "AddPermConsumable" for multi-use consumables like Life Crystals. The condition should look something like this: (Player p) => new Vector2(p.consumedLifeCrystals, 15); where p.consumedLifeCrystals is a variable denoting how many of the item has been consumed, and 15 is the maximum number of items that can be consumed. Returns true if successful, but throws an exception if an invalid argument is provided.
[*][code]Call("AddDefensiveEnemy", "DamageResistant", int npcID, float dmgResist, float kbResist, Func<NPC, bool> defensiveState)[/code] - Registers a new defensive enemy (similar to the Granite Golem or Granite Elemental). The defensiveState should look something like this: (NPC npc) => npc.ai[2] < 0f; Note that all enemies that use the Granite Elemental's AI are automatically added, but this call can be used to edit their DR and KB resist during their defensive states if you so choose (these default to 25% damage taken and -5% knockback resistance, respectively), or provide a different check for their defensive state (the default AI checks if npc.ai[0] == -1). Returns true if successful, but throws an exception if an invalid argument is provided. More types of defensive enemies beyond "DamageResistant" may be added in the future.
[*][code]Call("AddNoContactDamageEnemy", int npcID)[/code] - Registers an enemy which does not deal contact damage if the "Ranged Enemies Deal No Contact Damage" config option is enabled. By default, all enemies that use Caster AI are marked as "ranged enemies", as well as several vanilla enemies like Hornets and their variants, enemies that use bows or guns, and some miscellaneous enemies like Angry Nimbus and Icy Merman. Returns true if successful, but throws an exception if an invalid argument is provided.
[*][code]Call("RemoveNoContactDamageEnemy", int npcID)[/code] - Stops the listed enemy from having its contact damage removed/disabled. Could be useful if you want to override certain vanilla enemies being counted as "ranged attackers" (such as Probes on Infernum Mode). Returns true if successful, but throws an exception if an invalid argument is provided.
[/list]